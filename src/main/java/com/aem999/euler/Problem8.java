package com.aem999.euler;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static java.lang.Character.getNumericValue;

/**
 * Find the greatest product of five consecutive digits in the 1000-digit number:
 * <p>
 * 73167176531330624919225119674426574742355349194934
 * 96983520312774506326239578318016984801869478851843
 * 85861560789112949495459501737958331952853208805511
 * 12540698747158523863050715693290963295227443043557
 * 66896648950445244523161731856403098711121722383113
 * 62229893423380308135336276614282806444486645238749
 * 30358907296290491560440772390713810515859307960866
 * 70172427121883998797908792274921901699720888093776
 * 65727333001053367881220235421809751254540594752243
 * 52584907711670556013604839586446706324415722155397
 * 53697817977846174064955149290862569321978468622482
 * 83972241375657056057490261407972968652414535100474
 * 82166370484403199890008895243450658541227588666881
 * 16427171479924442928230863465674813919123162824586
 * 17866458359124566529476545682848912883142607690042
 * 24219022671055626321111109370544217506941658960408
 * 07198403850962455444362981230987879927244284909188
 * 84580156166097919133875499200524063689912560717606
 * 05886116467109405077541002256983155200055935729725
 * 71636269561882670428252483600823257530420752963450
 * </p>
 */
public class Problem8 implements EulerProblem<Integer>{
    private static final Logger LOG = LoggerFactory.getLogger(Problem8.class);

    @Override
    public Integer findAnswer() {
        return findLargestProduct(
            "73167176531330624919225119674426574742355349194934" +
            "96983520312774506326239578318016984801869478851843" +
            "85861560789112949495459501737958331952853208805511" +
            "12540698747158523863050715693290963295227443043557" +
            "66896648950445244523161731856403098711121722383113" +
            "62229893423380308135336276614282806444486645238749" +
            "30358907296290491560440772390713810515859307960866" +
            "70172427121883998797908792274921901699720888093776" +
            "65727333001053367881220235421809751254540594752243" +
            "52584907711670556013604839586446706324415722155397" +
            "53697817977846174064955149290862569321978468622482" +
            "83972241375657056057490261407972968652414535100474" +
            "82166370484403199890008895243450658541227588666881" +
            "16427171479924442928230863465674813919123162824586" +
            "17866458359124566529476545682848912883142607690042" +
            "24219022671055626321111109370544217506941658960408" +
            "07198403850962455444362981230987879927244284909188" +
            "84580156166097919133875499200524063689912560717606" +
            "05886116467109405077541002256983155200055935729725" +
            "71636269561882670428252483600823257530420752963450",
            5);
    }

    /**
     * Finds the largest product of {@code productSize} consecutive digits in the input string
     */
    public int findLargestProduct(String input, int productSize) {
        char[] chars = input.toCharArray();
        if (chars.length <= productSize) {
            return Integer.parseInt(input);
        }

        int largestProduct = 0;

        for (int i = productSize-1; i < chars.length; i++) {
            int product = getNumericValue(chars[i]) *
                          getNumericValue(chars[i-1]) *
                          getNumericValue(chars[i-2]) *
                          getNumericValue(chars[i-3]) *
                          getNumericValue(chars[i-4]);
            if (product > largestProduct) {
                largestProduct = product;
                LOG.debug("Found new largest product [{}] for digits [{}]", product, input.substring(i-productSize+1, i+1));
            }
        }

        return largestProduct;
    }

    public static void main(String[] args) {
        int answer = new Problem8().findAnswer();
        LOG.info("The answer is {}", answer);
    }
}
